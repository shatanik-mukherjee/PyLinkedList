from linkedlist import DoublyLinkedList, SinglyLinkedList


def singlyLinkedList_test() -> None:
    linked_list = SinglyLinkedList(SinglyLinkedList([0]))
    linked_list.append(0.1)
    linked_list.append(0.2)
    linked_list.append(0.3)
    linked_list.extend({"a": 100, "b": 200, "c": 300})
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.reverse()
    linked_list.append(SinglyLinkedList(["yes", "no"]))
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"index: {linked_list.index(0.2)}")
    linked_list.append(1000)
    linked_list.insert(1, "programming")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"popped: {linked_list.pop(3)}")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"popped: {linked_list.pop()}")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.append(10)
    linked_list.append("python")
    linked_list.append(0.5)
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"get: {linked_list.get(2)}")
    linked_list.insert(0, 20)
    linked_list.insert(4, 100)
    linked_list.append([1000, 2000, 3000])
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"popped: {linked_list.pop(1)}")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.append(True)
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.remove("python")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"index: {linked_list.index(10)}")
    _linked_list = SinglyLinkedList()
    _linked_list.append("object")
    _linked_list.append("oriented")
    _linked_list.append("python")
    _linked_list.insert(_linked_list.size(), False)
    linked_list.extend(_linked_list)
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.extend(DoublyLinkedList(["A", "B", "C"]))
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.extend("linkedlist")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")


def doublyLinkedList_test() -> None:
    linked_list = DoublyLinkedList(DoublyLinkedList([0]))
    linked_list.append(0.1)
    linked_list.append(0.2)
    linked_list.append(0.3)
    linked_list.extend({"a": 100, "b": 200, "c": 300})
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.reverse()
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.append(DoublyLinkedList(["yes", "no"]))
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"index: {linked_list.index(0.2)}")
    linked_list.append(1000)
    linked_list.insert(1, "programming")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"popped: {linked_list.pop(3)}")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"popped: {linked_list.pop()}")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.append(10)
    linked_list.append("python")
    linked_list.append(0.5)
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"get: {linked_list.get(2)}")
    linked_list.insert(0, 20)
    linked_list.insert(4, 100)
    linked_list.append([1000, 2000, 3000])
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"popped: {linked_list.pop(1)}")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.append(True)
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.remove("python")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print(f"index: {linked_list.index(10)}")
    _linked_list = DoublyLinkedList()
    _linked_list.append("object")
    _linked_list.append("oriented")
    _linked_list.append("python")
    _linked_list.insert(_linked_list.size(), False)
    linked_list.extend(_linked_list)
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.extend(SinglyLinkedList(["A", "B", "C"]))
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    linked_list.extend("linkedlist")
    print(f"linked list: {linked_list}, size: {linked_list.size()}")
    print("without negative indexing")
    for i in range(len(linked_list)):
        print(linked_list.get(i))
    print("with negative indexing")
    for i in range(len(linked_list) - 1, -1, -1):
        print(linked_list.get(i))


if __name__ == "__main__":
    singlyLinkedList_test()
    doublyLinkedList_test()
